// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by the Game Data Editor.
//
//      Changes to this file will be lost if the code is regenerated.
//
//      This file was generated from this data file:
//      C:/Project/HumanWeapon/Assets/GameDataEditor/Resources/gde_data.txt
//  </autogenerated>
// ------------------------------------------------------------------------------
using UnityEngine;
using UnityEngine.Video;
using System;
using System.Linq;
using System.Collections.Generic;

using GameDataEditor;

namespace GameDataEditor
{
    public class GDEItemData : IGDEData
    {
        static string noKey = "no";
		int _no;
        public int no
        {
            get { return _no; }
            set {
                if (_no != value)
                {
                    _no = value;
					GDEDataManager.SetInt(_key, noKey, _no);
                }
            }
        }

        static string indexKey = "index";
		int _index;
        public int index
        {
            get { return _index; }
            set {
                if (_index != value)
                {
                    _index = value;
					GDEDataManager.SetInt(_key, indexKey, _index);
                }
            }
        }

        static string valueKey = "value";
		float _value;
        public float value
        {
            get { return _value; }
            set {
                if (_value != value)
                {
                    _value = value;
					GDEDataManager.SetFloat(_key, valueKey, _value);
                }
            }
        }

        static string nameKey = "name";
		string _name;
        public string name
        {
            get { return _name; }
            set {
                if (_name != value)
                {
                    _name = value;
					GDEDataManager.SetString(_key, nameKey, _name);
                }
            }
        }

        static string affectKey = "affect";
		string _affect;
        public string affect
        {
            get { return _affect; }
            set {
                if (_affect != value)
                {
                    _affect = value;
					GDEDataManager.SetString(_key, affectKey, _affect);
                }
            }
        }

        public GDEItemData(string key) : base(key)
        {
            GDEDataManager.RegisterItem(this.SchemaName(), key);
        }
        public override Dictionary<string, object> SaveToDict()
		{
			var dict = new Dictionary<string, object>();
			dict.Add(GDMConstants.SchemaKey, "Item");
			
            dict.Merge(true, no.ToGDEDict(noKey));
            dict.Merge(true, index.ToGDEDict(indexKey));
            dict.Merge(true, value.ToGDEDict(valueKey));
            dict.Merge(true, name.ToGDEDict(nameKey));
            dict.Merge(true, affect.ToGDEDict(affectKey));
            return dict;
		}

        public override void UpdateCustomItems(bool rebuildKeyList)
        {
        }

        public override void LoadFromDict(string dataKey, Dictionary<string, object> dict)
        {
            _key = dataKey;

			if (dict == null)
				LoadFromSavedData(dataKey);
			else
			{
                dict.TryGetInt(noKey, out _no);
                dict.TryGetInt(indexKey, out _index);
                dict.TryGetFloat(valueKey, out _value);
                dict.TryGetString(nameKey, out _name);
                dict.TryGetString(affectKey, out _affect);
                LoadFromSavedData(dataKey);
			}
		}

        public override void LoadFromSavedData(string dataKey)
		{
			_key = dataKey;
			
            _no = GDEDataManager.GetInt(_key, noKey, _no);
            _index = GDEDataManager.GetInt(_key, indexKey, _index);
            _value = GDEDataManager.GetFloat(_key, valueKey, _value);
            _name = GDEDataManager.GetString(_key, nameKey, _name);
            _affect = GDEDataManager.GetString(_key, affectKey, _affect);
        }

        public GDEItemData ShallowClone()
		{
			string newKey = Guid.NewGuid().ToString();
			GDEItemData newClone = new GDEItemData(newKey);

            newClone.no = no;
            newClone.index = index;
            newClone.value = value;
            newClone.name = name;
            newClone.affect = affect;

            return newClone;
		}

        public GDEItemData DeepClone()
		{
			GDEItemData newClone = ShallowClone();
            return newClone;
		}

        public void Reset_no()
        {
            GDEDataManager.ResetToDefault(_key, noKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(noKey, out _no);
        }

        public void Reset_index()
        {
            GDEDataManager.ResetToDefault(_key, indexKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(indexKey, out _index);
        }

        public void Reset_value()
        {
            GDEDataManager.ResetToDefault(_key, valueKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetFloat(valueKey, out _value);
        }

        public void Reset_name()
        {
            GDEDataManager.ResetToDefault(_key, nameKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(nameKey, out _name);
        }

        public void Reset_affect()
        {
            GDEDataManager.ResetToDefault(_key, affectKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(affectKey, out _affect);
        }

        public void ResetAll()
        {
             #if !UNITY_WEBPLAYER
             GDEDataManager.DeregisterItem(this.SchemaName(), _key);
             #else

            GDEDataManager.ResetToDefault(_key, noKey);
            GDEDataManager.ResetToDefault(_key, indexKey);
            GDEDataManager.ResetToDefault(_key, nameKey);
            GDEDataManager.ResetToDefault(_key, affectKey);
            GDEDataManager.ResetToDefault(_key, valueKey);


            #endif

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            LoadFromDict(_key, dict);
        }
    }
}
