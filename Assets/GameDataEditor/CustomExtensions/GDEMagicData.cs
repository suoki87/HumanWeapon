// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by the Game Data Editor.
//
//      Changes to this file will be lost if the code is regenerated.
//
//      This file was generated from this data file:
//      C:/Project/HumanWeapon/Assets/GameDataEditor/Resources/gde_data.txt
//  </autogenerated>
// ------------------------------------------------------------------------------
using UnityEngine;
using UnityEngine.Video;
using System;
using System.Linq;
using System.Collections.Generic;

using GameDataEditor;

namespace GameDataEditor
{
    public class GDEMagicData : IGDEData
    {
        static string noKey = "no";
		int _no;
        public int no
        {
            get { return _no; }
            set {
                if (_no != value)
                {
                    _no = value;
					GDEDataManager.SetInt(_key, noKey, _no);
                }
            }
        }

        static string indexKey = "index";
		int _index;
        public int index
        {
            get { return _index; }
            set {
                if (_index != value)
                {
                    _index = value;
					GDEDataManager.SetInt(_key, indexKey, _index);
                }
            }
        }

        static string atkKey = "atk";
		float _atk;
        public float atk
        {
            get { return _atk; }
            set {
                if (_atk != value)
                {
                    _atk = value;
					GDEDataManager.SetFloat(_key, atkKey, _atk);
                }
            }
        }

        static string movKey = "mov";
		float _mov;
        public float mov
        {
            get { return _mov; }
            set {
                if (_mov != value)
                {
                    _mov = value;
					GDEDataManager.SetFloat(_key, movKey, _mov);
                }
            }
        }

        static string mpKey = "mp";
		float _mp;
        public float mp
        {
            get { return _mp; }
            set {
                if (_mp != value)
                {
                    _mp = value;
					GDEDataManager.SetFloat(_key, mpKey, _mp);
                }
            }
        }

        static string nameKey = "name";
		string _name;
        public string name
        {
            get { return _name; }
            set {
                if (_name != value)
                {
                    _name = value;
					GDEDataManager.SetString(_key, nameKey, _name);
                }
            }
        }

        static string prefabKey = "prefab";
		string _prefab;
        public string prefab
        {
            get { return _prefab; }
            set {
                if (_prefab != value)
                {
                    _prefab = value;
					GDEDataManager.SetString(_key, prefabKey, _prefab);
                }
            }
        }

        static string MovTypeKey = "MovType";
		string _MovType;
        public string MovType
        {
            get { return _MovType; }
            set {
                if (_MovType != value)
                {
                    _MovType = value;
					GDEDataManager.SetString(_key, MovTypeKey, _MovType);
                }
            }
        }

        public GDEMagicData(string key) : base(key)
        {
            GDEDataManager.RegisterItem(this.SchemaName(), key);
        }
        public override Dictionary<string, object> SaveToDict()
		{
			var dict = new Dictionary<string, object>();
			dict.Add(GDMConstants.SchemaKey, "Magic");
			
            dict.Merge(true, no.ToGDEDict(noKey));
            dict.Merge(true, index.ToGDEDict(indexKey));
            dict.Merge(true, atk.ToGDEDict(atkKey));
            dict.Merge(true, mov.ToGDEDict(movKey));
            dict.Merge(true, mp.ToGDEDict(mpKey));
            dict.Merge(true, name.ToGDEDict(nameKey));
            dict.Merge(true, prefab.ToGDEDict(prefabKey));
            dict.Merge(true, MovType.ToGDEDict(MovTypeKey));
            return dict;
		}

        public override void UpdateCustomItems(bool rebuildKeyList)
        {
        }

        public override void LoadFromDict(string dataKey, Dictionary<string, object> dict)
        {
            _key = dataKey;

			if (dict == null)
				LoadFromSavedData(dataKey);
			else
			{
                dict.TryGetInt(noKey, out _no);
                dict.TryGetInt(indexKey, out _index);
                dict.TryGetFloat(atkKey, out _atk);
                dict.TryGetFloat(movKey, out _mov);
                dict.TryGetFloat(mpKey, out _mp);
                dict.TryGetString(nameKey, out _name);
                dict.TryGetString(prefabKey, out _prefab);
                dict.TryGetString(MovTypeKey, out _MovType);
                LoadFromSavedData(dataKey);
			}
		}

        public override void LoadFromSavedData(string dataKey)
		{
			_key = dataKey;
			
            _no = GDEDataManager.GetInt(_key, noKey, _no);
            _index = GDEDataManager.GetInt(_key, indexKey, _index);
            _atk = GDEDataManager.GetFloat(_key, atkKey, _atk);
            _mov = GDEDataManager.GetFloat(_key, movKey, _mov);
            _mp = GDEDataManager.GetFloat(_key, mpKey, _mp);
            _name = GDEDataManager.GetString(_key, nameKey, _name);
            _prefab = GDEDataManager.GetString(_key, prefabKey, _prefab);
            _MovType = GDEDataManager.GetString(_key, MovTypeKey, _MovType);
        }

        public GDEMagicData ShallowClone()
		{
			string newKey = Guid.NewGuid().ToString();
			GDEMagicData newClone = new GDEMagicData(newKey);

            newClone.no = no;
            newClone.index = index;
            newClone.atk = atk;
            newClone.mov = mov;
            newClone.mp = mp;
            newClone.name = name;
            newClone.prefab = prefab;
            newClone.MovType = MovType;

            return newClone;
		}

        public GDEMagicData DeepClone()
		{
			GDEMagicData newClone = ShallowClone();
            return newClone;
		}

        public void Reset_no()
        {
            GDEDataManager.ResetToDefault(_key, noKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(noKey, out _no);
        }

        public void Reset_index()
        {
            GDEDataManager.ResetToDefault(_key, indexKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(indexKey, out _index);
        }

        public void Reset_atk()
        {
            GDEDataManager.ResetToDefault(_key, atkKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetFloat(atkKey, out _atk);
        }

        public void Reset_mov()
        {
            GDEDataManager.ResetToDefault(_key, movKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetFloat(movKey, out _mov);
        }

        public void Reset_mp()
        {
            GDEDataManager.ResetToDefault(_key, mpKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetFloat(mpKey, out _mp);
        }

        public void Reset_name()
        {
            GDEDataManager.ResetToDefault(_key, nameKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(nameKey, out _name);
        }

        public void Reset_prefab()
        {
            GDEDataManager.ResetToDefault(_key, prefabKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(prefabKey, out _prefab);
        }

        public void Reset_MovType()
        {
            GDEDataManager.ResetToDefault(_key, MovTypeKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(MovTypeKey, out _MovType);
        }

        public void ResetAll()
        {
             #if !UNITY_WEBPLAYER
             GDEDataManager.DeregisterItem(this.SchemaName(), _key);
             #else

            GDEDataManager.ResetToDefault(_key, noKey);
            GDEDataManager.ResetToDefault(_key, indexKey);
            GDEDataManager.ResetToDefault(_key, nameKey);
            GDEDataManager.ResetToDefault(_key, prefabKey);
            GDEDataManager.ResetToDefault(_key, MovTypeKey);
            GDEDataManager.ResetToDefault(_key, atkKey);
            GDEDataManager.ResetToDefault(_key, movKey);
            GDEDataManager.ResetToDefault(_key, mpKey);


            #endif

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            LoadFromDict(_key, dict);
        }
    }
}
